{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { db, auth } from \"../../firebase\";\nimport { USER_STATE_CHANGE, USER_POSTS_STATE_CHANGE, USER_FOLLOWING_STATE_CHANGE, USERS_DATA_STATE_CHANGE, USERS_POSTS_STATE_CHANGE } from \"../constants\";\n\nrequire('firebase/compat/firestore');\n\nexport function fetchUser() {\n  return function (dispatch) {\n    db.collection(\"users\").doc(auth.currentUser.uid).get().then(function (snapshot) {\n      if (snapshot.exists) {\n        console.log(snapshot.data());\n        dispatch({\n          type: USER_STATE_CHANGE,\n          currentUser: snapshot.data()\n        });\n      } else {\n        console.log('does not exist');\n      }\n    });\n  };\n}\nexport function fetchUserPosts() {\n  return function (dispatch) {\n    db.collection(\"posts\").doc(auth.currentUser.uid).collection(\"userPosts\").orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread(_objectSpread({\n          id: id\n        }, data), {}, {\n          user: user\n        });\n      });\n      dispatch({\n        type: USER_POSTS_STATE_CHANGE,\n        posts: posts\n      });\n    });\n  };\n}\nexport function fetchUserFollowing() {\n  return function (dispatch) {\n    var listener = db.collection(\"following\").doc(auth.currentUser.uid).collection(\"userFollowing\").onSnapshot(function (snapshot) {\n      var following = snapshot.docs.map(function (doc) {\n        var id = doc.id;\n        return id;\n      });\n      dispatch({\n        type: USER_FOLLOWING_STATE_CHANGE,\n        following: following\n      });\n\n      for (var i = 0; i < following.length; i++) {\n        dispatch(fetchUsersData(following[i]));\n      }\n    });\n  };\n}\nexport function fetchUsersData(uid) {\n  return function (dispatch, getState) {\n    var found = getState().usersState.users.some(function (el) {\n      return el.uid === uid;\n    });\n    console.log(getState());\n    console.log(uid);\n\n    if (!found) {\n      db.collection(\"users\").doc(uid).get().then(function (snapshot) {\n        if (snapshot.exists) {\n          var _user = snapshot.data();\n\n          _user.uid = snapshot.id;\n          dispatch({\n            type: USERS_DATA_STATE_CHANGE,\n            user: _user\n          });\n          dispatch(fetchUsersFollowingPosts(_user.uid));\n        }\n      });\n    } else {\n      console.log(\"not found\");\n    }\n  };\n}\nexport function fetchUsersFollowingPosts(uid) {\n  return function (dispatch, getState) {\n    db.collection(\"posts\").doc(uid).collection(\"userPosts\").orderBy(\"creation\", \"asc\").get().then(function (snapshot) {\n      console.log(uid);\n      console.log(snapshot);\n      var uid = snapshot.query.FF.path.segments[1];\n      var user = getState().usersState.users.find(function (el) {\n        return el.uid === uid;\n      });\n      console.log(\"BRUH\");\n      var posts = snapshot.docs.map(function (doc) {\n        var data = doc.data();\n        var id = doc.id;\n        return _objectSpread(_objectSpread({\n          id: id\n        }, data), {}, {\n          user: user\n        });\n      });\n      console.log(\"HERE\");\n      dispatch({\n        type: USERS_POSTS_STATE_CHANGE,\n        posts: posts,\n        uid: uid\n      });\n      console.log(\"THE STATE\");\n    });\n  };\n}","map":{"version":3,"names":["db","auth","USER_STATE_CHANGE","USER_POSTS_STATE_CHANGE","USER_FOLLOWING_STATE_CHANGE","USERS_DATA_STATE_CHANGE","USERS_POSTS_STATE_CHANGE","require","fetchUser","dispatch","collection","doc","currentUser","uid","get","then","snapshot","exists","console","log","data","type","fetchUserPosts","orderBy","posts","docs","map","id","user","fetchUserFollowing","listener","onSnapshot","following","i","length","fetchUsersData","getState","found","usersState","users","some","el","fetchUsersFollowingPosts","query","FF","path","segments","find"],"sources":["C:/Users/ragha/OneDrive/Desktop/Projects/instagram-clone/redux/actions/index.js"],"sourcesContent":["import { db, auth } from \"../../firebase\";\r\nimport { USER_STATE_CHANGE, USER_POSTS_STATE_CHANGE, USER_FOLLOWING_STATE_CHANGE, USERS_DATA_STATE_CHANGE, USERS_POSTS_STATE_CHANGE } from \"../constants\";\r\nrequire('firebase/compat/firestore')\r\nexport function fetchUser() {\r\n    return ((dispatch) => {\r\n        db.collection(\"users\").doc(auth.currentUser.uid).get().then((snapshot) => {\r\n            if (snapshot.exists) {\r\n                console.log(snapshot.data())\r\n                dispatch({ type: USER_STATE_CHANGE, currentUser: snapshot.data() })\r\n            } else {\r\n                console.log('does not exist');\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nexport function fetchUserPosts() {\r\n    return ((dispatch) => {\r\n        db.collection(\"posts\").doc(auth.currentUser.uid).collection(\"userPosts\").orderBy(\"creation\", \"asc\").get().then((snapshot) => {\r\n            let posts = snapshot.docs.map(doc => {\r\n                const data = doc.data();\r\n                const id = doc.id;\r\n                return {id, ...data, user}\r\n            })\r\n            dispatch({ type: USER_POSTS_STATE_CHANGE, posts })\r\n        })\r\n    })\r\n}\r\n\r\nexport function fetchUserFollowing() {\r\n    return ((dispatch) => {\r\n        let listener = db\r\n            .collection(\"following\")\r\n            .doc(auth.currentUser.uid)\r\n            .collection(\"userFollowing\")\r\n            .onSnapshot((snapshot) => {\r\n                let following = snapshot.docs.map(doc => {\r\n                    const id = doc.id;\r\n                    return id\r\n                })\r\n                dispatch({ type: USER_FOLLOWING_STATE_CHANGE, following });\r\n                for (let i = 0; i < following.length; i++) {\r\n                    dispatch(fetchUsersData(following[i]));\r\n                }\r\n            })\r\n    })\r\n}\r\n\r\nexport function fetchUsersData(uid) {\r\n    return ((dispatch, getState) => {\r\n        const found = getState().usersState.users.some(el => el.uid === uid);\r\n        console.log(getState())\r\n        console.log(uid)\r\n        \r\n        if (!found) {\r\n            db\r\n                .collection(\"users\")\r\n                .doc(uid)\r\n                .get()\r\n                .then((snapshot) => {\r\n                    if (snapshot.exists) {\r\n                        let user = snapshot.data();\r\n                        user.uid = snapshot.id;\r\n                        dispatch({ type: USERS_DATA_STATE_CHANGE, user });\r\n                        dispatch(fetchUsersFollowingPosts(user.uid));\r\n                    }\r\n                })\r\n        } else {\r\n            console.log(\"not found\")\r\n        }\r\n    })\r\n}\r\n\r\nexport function fetchUsersFollowingPosts(uid) {\r\n    return ((dispatch, getState) => {\r\n        db.collection(\"posts\").doc(uid).collection(\"userPosts\").orderBy(\"creation\", \"asc\").get().then((snapshot) => {\r\n            console.log(uid)\r\n            console.log(snapshot)\r\n            const uid = snapshot.query.FF.path.segments[1];\r\n            const user = getState().usersState.users.find(el => el.uid === uid);\r\n            console.log(\"BRUH\")\r\n            let posts = snapshot.docs.map(doc => {\r\n                const data = doc.data();\r\n                const id = doc.id;\r\n                return {id, ...data, user}\r\n            })\r\n            console.log(\"HERE\")\r\n            dispatch({ type: USERS_POSTS_STATE_CHANGE, posts, uid })\r\n            console.log(\"THE STATE\")\r\n        })\r\n    })\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}